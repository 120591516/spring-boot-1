#自定义的字段
user.id=${random.value}
user.count=${random.int}
user.max=${random.long}
user.number=${random.int(100)}
# tomcat
#server.tomcat.max-threads=100
#server.tomcat.min-spare-threads=20
#server.port=80
#server.connection-timeout=5000

#https配置
#server.ssl.key-store.classpath=keystore
#server.ssl.key-store-type=JKS
#server.ssl.key-password=123
#server.ssl.key-alias=tomcat

##
spring.jpa.show-sql = false

#日志级别，日志级别可以在logback配置文件里面配置，如果在配置项里面配置将是全局的
#debug=true
#logging.level.root=WARN
#日志颜色
spring.output.ansi.enabled=ALWAYS

#日志
#logging.config名称如果是logback-spring.xml 那么代表可以是用扩展的标签
#logging.config=classpath:logback.xml
logging.config=classpath:logback-spring.xml
logging.file=myapps.log
logging.path=var/temp




# 数据库 如果不填写配置项默认走的H2内存数据库
#spring.datasource.name=datasource
#spring.datasource.schema=createtable.sql
#spring.datasource.url= jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=utf-8
#spring.datasource.username=root
#spring.datasource.password=root
#如果不配置，会从spring.datasource.上推断出driver-class-name
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver


#develop tool 远程功能
#spring.devtools.remote.secret=1234
# Enable remote debug support.
#spring.devtools.remote.debug.enabled=true
#spring.devtools.remote.debug.local-port=8000

#安全 依赖spring-boot-starter-security架包，如果注释了就不拦截了噢，Securing sensitive endpoints
##默认用户名字
security.user.name=admin
#如果不填的密码会打印到日志  Password for the default user name. A random password is logged on startup by default.
security.user.password=admin
# Granted roles for the default user name.
security.user.role=USER
#自定义endpoint的地址、端口、远程访问地址 http://localhost:8081/manage/health
#management.context-path=/manage
#management.port=8081
#management.address=127.0.0.1


#endpoints 终点，配置所有可显示的终节点，如/info  /health  /trace /env  等
#The prefix ?endpoints + . + name” is used to uniquely identify the endpoint that is being configured.
endpoints.shutdown.sensitive=false
#改成不需要springsecurity校验登陆就可以访问的,远程停掉服务，这个功能要慎用！
endpoints.shutdown.enabled=true

#敏感的节点需要 endpoints will require a username/password when they are accessed over HTTP (or simply disabled if web security is not enabled).
#endpoints.health.sensitive=true
#endpoints.env.sensitive=true

#Cross-origin resource sharing (CORS) 跨域支持
endpoints.cors.allowed-origins=http://example.com
endpoints.cors.allowed-methods=GET,POST


#自定义info信息
info.build.artifact=@project.artifactId@
info.build.name=@project.name@
info.build.description=@project.description@
info.build.version=@project.version@

#如果配置了redis http://localhost:8080/health 也会监控redis的性能
####################################################redis#####################################################################
# Database index used by the connection factory.
spring.redis.database=0
# Redis server host.
spring.redis.host=123.56.118.135
# Login password of the redis server.
spring.redis.password=gaoguangjin
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
spring.redis.pool.max-active=8
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
spring.redis.pool.max-idle=8
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
spring.redis.pool.max-wait=-1
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
spring.redis.pool.min-idle=0
# Redis server port.
spring.redis.port=6379
# Name of Redis server.
#spring.redis.sentinel.master=
# Comma-separated list of host:port pairs.
#spring.redis.sentinel.nodes=
# Connection timeout in milliseconds.
spring.redis.timeout=1000